// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: proto/blob/v2/blob.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlobProto is the protobuf representation of a blob (binary large object)
// to be published to the Celestia blockchain. The data of a Blob is published
// to a namespace and is encoded into shares based on the format specified by
// share_version.
type BlobProto struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId      []byte                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Data             []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ShareVersion     uint32                 `protobuf:"varint,3,opt,name=share_version,json=shareVersion,proto3" json:"share_version,omitempty"`
	NamespaceVersion uint32                 `protobuf:"varint,4,opt,name=namespace_version,json=namespaceVersion,proto3" json:"namespace_version,omitempty"`
	// Signer is sdk.AccAddress that paid for this blob. This field is optional
	// and can only be used when share_version is set to 1.
	Signer        []byte `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlobProto) Reset() {
	*x = BlobProto{}
	mi := &file_proto_blob_v2_blob_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobProto) ProtoMessage() {}

func (x *BlobProto) ProtoReflect() protoreflect.Message {
	mi := &file_proto_blob_v2_blob_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobProto.ProtoReflect.Descriptor instead.
func (*BlobProto) Descriptor() ([]byte, []int) {
	return file_proto_blob_v2_blob_proto_rawDescGZIP(), []int{0}
}

func (x *BlobProto) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *BlobProto) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BlobProto) GetShareVersion() uint32 {
	if x != nil {
		return x.ShareVersion
	}
	return 0
}

func (x *BlobProto) GetNamespaceVersion() uint32 {
	if x != nil {
		return x.NamespaceVersion
	}
	return 0
}

func (x *BlobProto) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

// BlobTx wraps an encoded sdk.Tx with a second field to contain blobs of data.
// The raw bytes of the blobs are not signed over, instead we verify each blob
// using the relevant MsgPayForBlobs that is signed over in the encoded sdk.Tx.
type BlobTx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            []byte                 `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Blobs         []*BlobProto           `protobuf:"bytes,2,rep,name=blobs,proto3" json:"blobs,omitempty"`
	TypeId        string                 `protobuf:"bytes,3,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlobTx) Reset() {
	*x = BlobTx{}
	mi := &file_proto_blob_v2_blob_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTx) ProtoMessage() {}

func (x *BlobTx) ProtoReflect() protoreflect.Message {
	mi := &file_proto_blob_v2_blob_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTx.ProtoReflect.Descriptor instead.
func (*BlobTx) Descriptor() ([]byte, []int) {
	return file_proto_blob_v2_blob_proto_rawDescGZIP(), []int{1}
}

func (x *BlobTx) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *BlobTx) GetBlobs() []*BlobProto {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *BlobTx) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

// IndexWrapper adds index metadata to a transaction. This is used to track
// transactions that pay for blobs, and where the blobs start in the square.
type IndexWrapper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            []byte                 `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	ShareIndexes  []uint32               `protobuf:"varint,2,rep,packed,name=share_indexes,json=shareIndexes,proto3" json:"share_indexes,omitempty"`
	TypeId        string                 `protobuf:"bytes,3,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexWrapper) Reset() {
	*x = IndexWrapper{}
	mi := &file_proto_blob_v2_blob_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexWrapper) ProtoMessage() {}

func (x *IndexWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_proto_blob_v2_blob_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexWrapper.ProtoReflect.Descriptor instead.
func (*IndexWrapper) Descriptor() ([]byte, []int) {
	return file_proto_blob_v2_blob_proto_rawDescGZIP(), []int{2}
}

func (x *IndexWrapper) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *IndexWrapper) GetShareIndexes() []uint32 {
	if x != nil {
		return x.ShareIndexes
	}
	return nil
}

func (x *IndexWrapper) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

var File_proto_blob_v2_blob_proto protoreflect.FileDescriptor

const file_proto_blob_v2_blob_proto_rawDesc = "" +
	"\n" +
	"\x18proto/blob/v2/blob.proto\x12\rproto.blob.v2\"\xac\x01\n" +
	"\tBlobProto\x12!\n" +
	"\fnamespace_id\x18\x01 \x01(\fR\vnamespaceId\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12#\n" +
	"\rshare_version\x18\x03 \x01(\rR\fshareVersion\x12+\n" +
	"\x11namespace_version\x18\x04 \x01(\rR\x10namespaceVersion\x12\x16\n" +
	"\x06signer\x18\x05 \x01(\fR\x06signer\"a\n" +
	"\x06BlobTx\x12\x0e\n" +
	"\x02tx\x18\x01 \x01(\fR\x02tx\x12.\n" +
	"\x05blobs\x18\x02 \x03(\v2\x18.proto.blob.v2.BlobProtoR\x05blobs\x12\x17\n" +
	"\atype_id\x18\x03 \x01(\tR\x06typeId\"\\\n" +
	"\fIndexWrapper\x12\x0e\n" +
	"\x02tx\x18\x01 \x01(\fR\x02tx\x12#\n" +
	"\rshare_indexes\x18\x02 \x03(\rR\fshareIndexes\x12\x17\n" +
	"\atype_id\x18\x03 \x01(\tR\x06typeIdB3Z1github.com/celestiaorg/go-square/v3/proto/blob/v2b\x06proto3"

var (
	file_proto_blob_v2_blob_proto_rawDescOnce sync.Once
	file_proto_blob_v2_blob_proto_rawDescData []byte
)

func file_proto_blob_v2_blob_proto_rawDescGZIP() []byte {
	file_proto_blob_v2_blob_proto_rawDescOnce.Do(func() {
		file_proto_blob_v2_blob_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_blob_v2_blob_proto_rawDesc), len(file_proto_blob_v2_blob_proto_rawDesc)))
	})
	return file_proto_blob_v2_blob_proto_rawDescData
}

var file_proto_blob_v2_blob_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_blob_v2_blob_proto_goTypes = []any{
	(*BlobProto)(nil),    // 0: proto.blob.v2.BlobProto
	(*BlobTx)(nil),       // 1: proto.blob.v2.BlobTx
	(*IndexWrapper)(nil), // 2: proto.blob.v2.IndexWrapper
}
var file_proto_blob_v2_blob_proto_depIdxs = []int32{
	0, // 0: proto.blob.v2.BlobTx.blobs:type_name -> proto.blob.v2.BlobProto
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_blob_v2_blob_proto_init() }
func file_proto_blob_v2_blob_proto_init() {
	if File_proto_blob_v2_blob_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_blob_v2_blob_proto_rawDesc), len(file_proto_blob_v2_blob_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_blob_v2_blob_proto_goTypes,
		DependencyIndexes: file_proto_blob_v2_blob_proto_depIdxs,
		MessageInfos:      file_proto_blob_v2_blob_proto_msgTypes,
	}.Build()
	File_proto_blob_v2_blob_proto = out.File
	file_proto_blob_v2_blob_proto_goTypes = nil
	file_proto_blob_v2_blob_proto_depIdxs = nil
}
